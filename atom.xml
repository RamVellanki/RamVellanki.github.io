<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ram's Blog]]></title>
  <link href="http://ramvellanki.github.io/atom.xml" rel="self"/>
  <link href="http://ramvellanki.github.io/"/>
  <updated>2016-05-18T17:19:54+00:00</updated>
  <id>http://ramvellanki.github.io/</id>
  <author>
    <name><![CDATA[Ram Vellanki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular2 Seed Project]]></title>
    <link href="http://ramvellanki.github.io/blog/2016/05/17/angular2-seed-project/"/>
    <updated>2016-05-17T15:56:22+00:00</updated>
    <id>http://ramvellanki.github.io/blog/2016/05/17/angular2-seed-project</id>
    <content type="html"><![CDATA[<p>I have been working with Angular2 since it&rsquo;s beta.12 and as Angular2 RC1 got released, I thought of creating a Seed project.</p>

<p><a href="https://github.com/RamVellanki/ng2-material-tdd-e2e-seed">Here</a> is the link to the seed project.</p>

<p>Following are the features available in this repository:
* Material2 - Toolbar and Button are included but any other component can be added easily.
* Karma - Basic Karma TDD setup is ready that can be used.
* Protractor - Basic Protractor setup is ready for end to end testing.
* ExpressJS - The project uses ExpressJS.</p>

<p>The repository uses <code>gulp</code> and following <code>npm</code> tasks are available:
* <code>npm run dev</code> - Starts the project in Development mode.
* <code>npm run prod</code> - Starts the project in Production mode.
* <code>npm run test</code> - Runs Unit Tests.
* <code>npm run e2e</code> - Runs end to end Tests.</p>

<hr />

<h3>Next Steps</h3>

<p>I am also working on a JSPM Seed project and will post it sometime soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Casablanca (CPPRESTSDK)]]></title>
    <link href="http://ramvellanki.github.io/blog/2016/05/15/working-with-casablanca-cpprestsdk/"/>
    <updated>2016-05-15T12:54:23+00:00</updated>
    <id>http://ramvellanki.github.io/blog/2016/05/15/working-with-casablanca-cpprestsdk</id>
    <content type="html"><![CDATA[<h1>Casablanca</h1>

<p><em>C++ meets WebServices</em></p>

<h3>Introduction</h3>

<p>Calling a WebService and processing the response, is pretty much an easy task, especially if you are programming using Java, C# or JavaScript or any of the modern programming languages. But, recently someone asked me about how to the same using C++ and in particular with Visual C++. Though, I have worked on Visual C++ and MFC in particular, I have never tried calling a WebService from VC++. So, a quick google search on this pointed me towards Casablanca.</p>

<h3>What?</h3>

<p>So, what is Casablanca?
Casablanca is a Microsoft&rsquo;s project for cloud-based client-server communication. Casablanca is also known as C++ REST SDK. This SDK helps C++ developers to connect to services.</p>

<h3>How?</h3>

<p>How do we use C++ REST SDK?
After visiting, <a href="https://github.com/microsoft/cpprestsdk">Casablanca</a> official github page, I found a tutorial for <a href="https://github.com/microsoft/cpprestsdk">quick start</a>. Following the tutorial, I came up with the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;cpprest/http_client.h&gt;
</span><span class='line'>#include &lt;cpprest/filestream.h&gt;
</span><span class='line'>#include &lt;cpprest/json.h&gt;
</span><span class='line'>#include &lt;iosfwd&gt;
</span><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>using namespace web;
</span><span class='line'>using namespace web::http;
</span><span class='line'>using namespace web::http::client;
</span><span class='line'>using namespace std;
</span><span class='line'>
</span><span class='line'>// Retrieves a JSON value from an HTTP request.
</span><span class='line'>pplx::task&lt;void&gt; RequestJSONValueAsync()
</span><span class='line'>{
</span><span class='line'>  http_client client(U("http://date.jsontest.com/"));
</span><span class='line'>    return client.request(methods::GET).then([](http_response response) -&gt; pplx::task&lt;json::value&gt;
</span><span class='line'>    {
</span><span class='line'>        if(response.status_code() == status_codes::OK)
</span><span class='line'>        {
</span><span class='line'>            return response.extract_json();
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        // Handle error cases, for now return empty json value... 
</span><span class='line'>        return pplx::task_from_result(json::value());
</span><span class='line'>    })
</span><span class='line'>        .then([](pplx::task&lt;json::value&gt; previousTask)
</span><span class='line'>    {
</span><span class='line'>        try
</span><span class='line'>        {
</span><span class='line'>            const json::value& v = previousTask.get();
</span><span class='line'>            // Perform actions here to process the JSON value...
</span><span class='line'>          if (!v.is_null())
</span><span class='line'>          {
</span><span class='line'>              for (auto iter = v.cbegin(); iter != v.cend(); ++iter)
</span><span class='line'>              {
</span><span class='line'>                  const json::value &key = iter-&gt;first;
</span><span class='line'>                  const json::value &value = iter-&gt;second;
</span><span class='line'>
</span><span class='line'>                  if (value.is_object() || value.is_array())
</span><span class='line'>                  {
</span><span class='line'>                      if ((!key.is_null()) && (key.is_string()))
</span><span class='line'>                      {
</span><span class='line'>                          std::wcout &lt;&lt; L"Parent: " &lt;&lt; key.as_string() &lt;&lt; std::endl;
</span><span class='line'>                      }
</span><span class='line'>                      if ((!key.is_null()) && (key.is_string()))
</span><span class='line'>                      {
</span><span class='line'>                          std::wcout &lt;&lt; L"End of Parent: " &lt;&lt; key.as_string() &lt;&lt; std::endl;
</span><span class='line'>                      }
</span><span class='line'>                  }
</span><span class='line'>                  else
</span><span class='line'>                  {
</span><span class='line'>                      std::wcout &lt;&lt; L"Key: " &lt;&lt; key.as_string() &lt;&lt; L", Value: " &lt;&lt; value.to_string() &lt;&lt; std::endl;
</span><span class='line'>                  }
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>
</span><span class='line'>        }
</span><span class='line'>        catch (const http_exception& e)
</span><span class='line'>        {
</span><span class='line'>            // Print error.
</span><span class='line'>            wostringstream ss;
</span><span class='line'>            ss &lt;&lt; e.what() &lt;&lt; endl;
</span><span class='line'>            wcout &lt;&lt; ss.str();
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int wmain()
</span><span class='line'>{
</span><span class='line'>    wcout &lt;&lt; L"Calling RequestJSONValueAsync..." &lt;&lt; endl;
</span><span class='line'>    RequestJSONValueAsync().wait();
</span><span class='line'>
</span><span class='line'>    wcout &lt;&lt; L"Calling IterateJSONValue..." &lt;&lt; endl;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As shown, I have used <code>jsontest</code> for testing the json. Running this code, should generate the following output.</p>

<p><img src="https://pli7vg-sn3302.files.1drv.com/y3m79nzKN9U_Po3U72nal0DwxcmF121J4q5wwx4eboETjCLj_-YHGVsAIClaJOC4QCZ8BJAZaf8XSoWkMkyKPkHHiAUpvmAKIij9NydCNaC8Cfpo0PbvQQxisRkUp2vGupQGn0YlJRiZvhFnZHTL2Bzn05z4tSDy1nia3SzQl9LWxc?width=418&amp;height=72&amp;cropmode=none" alt="Output" /></p>

<h3>Gotchas</h3>

<ul>
<li>One issue that one may face while setting up a project using CPPRESTSDK is that it requires VS120 toolset. So, make sure in project -> properties, the correct platform toolset is updated in Visual Studio.</li>
</ul>


<h3>Next Steps</h3>

<p>This was a simple example that I have created for quick demo. But, Casablanca has lot of other features that can be used. Following are some of the important features:
* This has support for <a href="https://github.com/Microsoft/cpprestsdk/wiki/Web-Socket">Web Sockets</a>
* This also supports multiple platforms including Linux and Mac.</p>

<p>For more features and samples visit Casablanca&rsquo;s official <a href="https://github.com/Microsoft/cpprestsdk/wiki">wiki</a>.</p>
]]></content>
  </entry>
  
</feed>
